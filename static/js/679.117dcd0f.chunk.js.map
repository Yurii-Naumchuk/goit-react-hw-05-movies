{"version":3,"file":"static/js/679.117dcd0f.chunk.js","mappings":"8RAEaA,EAASC,EAAAA,GAAAA,GAAH,+PAWNC,EAAMD,EAAAA,GAAAA,IAAH,2D,SCTD,SAASE,EAAT,GAAmC,IAC1CC,EADyC,EAARC,KAChBA,KACvB,OACE,0BACE,SAACL,EAAD,UACGI,EAAUE,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACb,0BACGD,GACC,SAACP,EAAD,CAAKS,IAAG,UAVJ,mCAUI,OAAiBF,GAAgBG,IAAKL,KAE9C,SAACL,EAAD,CAAKS,IAAKE,EAAKD,IAAI,UAGrB,uBAAIL,KACJ,sCAAcC,OARPE,EADI,OAetB,CCjBc,SAASI,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQV,GAAOW,EAAAA,EAAAA,MAAPX,GAoBR,OAlBAY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,uFAChBb,EADgB,wDAIrBU,GAAW,GAJU,mBAMAI,EAAAA,EAAAA,GAAU,CAAEd,GAAAA,IANZ,OAMbe,EANa,OAOnBT,EAAQS,GAPW,kDASnBP,EAAS,EAAD,IATW,yBAWnBE,GAAW,GAXQ,6EAAH,qDAepBG,GACD,GAAE,CAACb,KAEF,gCACGL,IAAQ,SAACF,EAAD,CAAgBE,KAAMA,IAC9Bc,IAAW,SAACO,EAAA,EAAD,IACXT,IAAS,4MAGf,C,6LCrCKU,EAAS,mCACfC,EAAAA,GAAAA,SAAAA,QAAyB,+BAKzB,IAAMC,EAAa,mCAAG,oGACGD,EAAAA,GAAAA,IAAA,sCACUD,IAFb,cACdG,EADc,yBAKbA,EAASL,MALI,2CAAH,qDAObM,EAAc,mCAAG,8FAASrB,EAAT,EAASA,GAAT,SACEkB,EAAAA,GAAAA,IAAA,iBACXlB,EADW,oBACGiB,EADH,oBADF,cACfG,EADe,OAIrBE,QAAQC,IAAIH,EAASL,MAJA,kBAKdK,EAASL,MALK,2CAAH,sDAQdS,EAAW,mCAAG,wGAASC,MAAAA,OAAT,MAAiB,GAAjB,MAAqBC,KAAAA,OAArB,MAA4B,EAA5B,WACKR,EAAAA,GAAAA,IAAA,gCACID,EADJ,gCACkCS,EADlC,sCACoED,IAFzE,cACZL,EADY,yBAKXA,EAASL,MALE,2CAAH,sDAOXD,EAAS,mCAAG,8FAASd,EAAT,EAASA,GAAT,SACOkB,EAAAA,GAAAA,IAAA,qBACdlB,EADc,4BACQiB,EADR,oBADP,cACVG,EADU,yBAITA,EAASL,MAJA,2CAAH,sDAMTY,EAAY,mCAAG,8FAAS3B,EAAT,EAASA,GAAT,SACIkB,EAAAA,GAAAA,IAAA,qBACdlB,EADc,4BACQiB,EADR,2BADJ,cACbG,EADa,yBAIZA,EAASL,KAAKa,SAJF,2CAAH,qD,m0NCpCH,SAASC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["components/CastMovies/CastMoviesList.styled.jsx","components/CastMovies/CastMoviesList.jsx","components/CastMovies/CastMovies.jsx","services/api.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastUl = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  padding: 20px;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const Img = styled.img`\n  width: 240px;\n  height: 320px;\n`;\n","import img from '../../assets/no_img.jpg';\nimport { CastUl, Img } from './CastMoviesList.styled';\nconst image_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport default function CastMoviesList({ cast }) {\n  const castMovie = cast.cast;\n  return (\n    <div>\n      <CastUl>\n        {castMovie.map(({ name, character, profile_path, id }) => (\n          <li key={id}>\n            {profile_path ? (\n              <Img src={`${image_URL}${profile_path}`} alt={name} />\n            ) : (\n              <Img src={img} alt=\"name\" />\n            )}\n\n            <p>{name}</p>\n            <p>Character:{character}</p>\n          </li>\n        ))}\n      </CastUl>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchCast } from '../../services/api';\nimport { Loader } from '../Loader/Loader';\nimport CastMoviesList from './CastMoviesList';\n\nexport default function CastMovies() {\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCastActor = async () => {\n      if (!id) {\n        return;\n      }\n      setLoading(true);\n      try {\n        const data = await fetchCast({ id });\n        setCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCastActor();\n  }, [id]);\n  return (\n    <>\n      {cast && <CastMoviesList cast={cast} />}\n      {loading && <Loader />}\n      {error && <p>Упссс...Щось зламалося... Спробуй ще...</p>}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst MY_KEY = 'b38b0907dd20d39e91235c8171bbf1c5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n// axios.defaults.headers.common['Authorization'] = 'b38b0907dd20d39e91235c8171bbf1c5';\n\n\n\nconst fetchTrending = async () => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${MY_KEY}`\n  );\n\n  return response.data;\n};\nconst fetchMoviesOne = async ({ id }) => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${MY_KEY}&language=en-US`\n  );\n  console.log(response.data);\n  return response.data;\n};\n\nconst fetchMovies = async ({ query = '', page = 1 }) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${MY_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`\n  );\n\n  return response.data;\n};\nconst fetchCast = async ({ id }) => {\n  const response = await axios.get(`\n  /movie/${id}/credits?api_key=${MY_KEY}&language=en-US`);\n\n  return response.data;\n};\nconst fetchReviews = async ({ id }) => {\n  const response = await axios.get(`\n  /movie/${id}/reviews?api_key=${MY_KEY}&language=en-US&page=1`);\n\n  return response.data.results;\n};\n\nexport { fetchTrending, fetchMovies, fetchMoviesOne, fetchCast, fetchReviews };","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["CastUl","styled","Img","CastMoviesList","castMovie","cast","map","name","character","profile_path","id","src","alt","img","CastMovies","useState","setCast","error","setError","loading","setLoading","useParams","useEffect","fetchCastActor","fetchCast","data","Loader","MY_KEY","axios","fetchTrending","response","fetchMoviesOne","console","log","fetchMovies","query","page","fetchReviews","results","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}